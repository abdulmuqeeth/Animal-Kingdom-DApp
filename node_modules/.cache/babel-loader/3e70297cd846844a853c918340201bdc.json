{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenVerifier = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _base64url = require('base64url');\n\nvar _base64url2 = _interopRequireDefault(_base64url);\n\nvar _cryptoClients = require('./cryptoClients');\n\nvar _errors = require('./errors');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar TokenVerifier = exports.TokenVerifier = function () {\n  function TokenVerifier(signingAlgorithm, rawPublicKey) {\n    _classCallCheck(this, TokenVerifier);\n\n    if (!(signingAlgorithm && rawPublicKey)) {\n      throw new _errors.MissingParametersError('a signing algorithm and public key are required');\n    }\n\n    if (typeof signingAlgorithm !== 'string') {\n      throw 'signing algorithm parameter must be a string';\n    }\n\n    signingAlgorithm = signingAlgorithm.toUpperCase();\n\n    if (!_cryptoClients.cryptoClients.hasOwnProperty(signingAlgorithm)) {\n      throw 'invalid signing algorithm';\n    }\n\n    this.tokenType = 'JWT';\n    this.cryptoClient = _cryptoClients.cryptoClients[signingAlgorithm];\n    this.rawPublicKey = rawPublicKey;\n  }\n\n  _createClass(TokenVerifier, [{\n    key: 'verify',\n    value: function verify(token) {\n      if (typeof token === 'string') {\n        return this.verifyCompact(token);\n      } else if ((typeof token === 'undefined' ? 'undefined' : _typeof(token)) === 'object') {\n        return this.verifyExpanded(token);\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: 'verifyCompact',\n    value: function verifyCompact(token) {\n      // decompose the token into parts\n      var tokenParts = token.split('.'); // calculate the signing input hash\n\n      var signingInput = tokenParts[0] + '.' + tokenParts[1];\n      var signingInputHash = this.cryptoClient.createHash(signingInput); // extract the signature as a DER array\n\n      var derSignatureBuffer = this.cryptoClient.loadSignature(tokenParts[2]); // verify the signed hash\n\n      return this.cryptoClient.verifyHash(signingInputHash, derSignatureBuffer, this.rawPublicKey);\n    }\n  }, {\n    key: 'verifyExpanded',\n    value: function verifyExpanded(token) {\n      var _this = this;\n\n      var signingInput = [token['header'].join('.'), _base64url2.default.encode(token['payload'])].join('.');\n      var signingInputHash = this.cryptoClient.createHash(signingInput);\n      var verified = true;\n      token['signature'].map(function (signature) {\n        var derSignatureBuffer = _this.cryptoClient.loadSignature(signature);\n\n        var signatureVerified = _this.cryptoClient.verifyHash(signingInputHash, derSignatureBuffer, _this.rawPublicKey);\n\n        if (!signatureVerified) {\n          verified = false;\n        }\n      });\n      return verified;\n    }\n  }]);\n\n  return TokenVerifier;\n}();","map":null,"metadata":{},"sourceType":"script"}